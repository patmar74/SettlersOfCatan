/**
 * Autogenerated class that displays board. Panel will be extracted from "initialize" class.
 * @author Dominic, @Mihail
 */
package inClass427;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Image;
import java.awt.Point;
import java.util.ArrayList;

import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

import otherPeoplesFiles.GameBoard;
import otherPeoplesFiles.ResourceType;
import otherPeoplesFiles.Tile;

/*
 * The Robber needs to be painted, and Tokens need to be painted to start
 */
/**
 * This class sets the JPanel the game board is displayed on.
 * 
 * For testing purposes, this class has a JFrame that the panel is displayed on,
 * but later on this class will only have the JPanel, and it will be added to
 * the frame in a GameDisplay GUI that will have all the visible panels used on
 * the display.
 * 
 * @author Trent
 *
 */
public class CatanWindow {

	// scale used to size the image icons
	// this can be changed for different display sizes
	// must be divisible by 4 for the Tile images to display properly
	final int SCALE = 52;
	// the width of the JPanel panel
	final int width = SCALE * 10;
	// the width of the JPanel panel
	final int height = SCALE * 8;
	private JPanel panel;
	private JFrame frame;

	/**
	 * Displays the game board
	 * 
	 * @param gameBoard
	 *            - the game board background setup that the panel is creating a
	 *            visual representation for
	 */
	public CatanWindow(GameBoard gameBoard) {
		initialize(gameBoard);
	}// end constructor

	/**
	 * Initialize the contents of the frame.
	 */

	private void initialize(GameBoard gameBoard) {
		frame = new JFrame();
		frame.setResizable(true);
		frame.setBounds(100, 100, 700, 650);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);

		panel = new JPanel();
		// draws a boarder around the panel so I can see where it lies on the
		// frame
		panel.setBorder(BorderFactory.createLineBorder(Color.black));
		// sets the dimensions of the panel
		panel.setBounds(0, 0, width, height);
		// adds the panel to the JFrame
		frame.getContentPane().add(panel);
		panel.setLayout(null);

		// sets the list of tiles on the game board
		ArrayList<Tile> tileList = gameBoard.getTiles().getTilesArray();
		// sets the list of the tile's reference points, these points are used
		// to orient the images for the tiles
		RefferencePoints reffPoints = new RefferencePoints(gameBoard);
		ArrayList<Point> referencePoints = reffPoints.getRefferencePointsList();

		// loops through all of the tiles and displays them on the panel
		for (int index = 0; index < tileList.size(); index++) {
			// sets the resource type of the tile
			ResourceType tileResource = tileList.get(index).getResource();

			// sets the image icon for the tile based on its resource type
			ImageIcon icon = new ImageIcon("Resources/TileImages/" + tileResource.toString() + ".png");
			// transform the image icon into an image so it can be scaled
			Image image = icon.getImage();
			// scales the image two two times the size of the final int SCALE
			// this is size of the JLable the image will sit on
			Image scaledImage = image.getScaledInstance(SCALE * 2, SCALE * 2, java.awt.Image.SCALE_SMOOTH);
			// transforms the image back into a IconImage so it can be added to
			// a JLabel
			icon = new ImageIcon(scaledImage);

			// creates a label with the image icon in the center
			JLabel lblTileImage = new JLabel("", icon, JLabel.CENTER);
			// sets the x value of the tile's reference point
			int x = (int) referencePoints.get(index).getX();
			// sets the y value of the tile's reference point
			int y = (int) referencePoints.get(index).getY();
			// The images line up next to each other left to right, but they
			// overlap and stack on top of each other from top to bottom.
			// each row starts 3/4 of the way down the height of the previous
			// one. This shift is accounted four by moving the y value of each
			// row up 1/4 of the tile height (SCALE).
			int adjustRowHeight = SCALE / 4 * y;
			// sets the location and dimension of the label holding the Tile's
			// image icon
			lblTileImage.setBounds(x * SCALE, y * SCALE - adjustRowHeight, SCALE * 2, SCALE * 2);
			// adds the label to the panel
			panel.add(lblTileImage);
		}
		// once all tiles have been visually represented, the frame is set to
		// visible
		frame.setVisible(true);
	}// end initialize method

	/**
	 * Inner Main used for testing
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		// creates a game board object to pass into the constructor
		GameBoard gb = new GameBoard();

		EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				try {
					CatanWindow window = new CatanWindow(gb);
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
}// end CatanWindow class
